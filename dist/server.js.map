{"version":3,"sources":["../src/server.js"],"names":["execute","assetPort","process","env","PORT","disablePublicTunnel","DISABLE_PUBLIC_TUNNEL","envFile","join","cwd","app","chcpContext","io","sourceDirectory","ignoredFiles","context","funcs","argv","localdev","push","publicTunnel","content_url","debugOpts","debug_url","console_url","assetServer","local_url","console","log","config","updateLocalEnv","reduce","when","localEnv","config_url","json","JSON","stringify","writeFileSync","fileChangeFilter","file","fileIsAllowed","relativeFilePath","relative","i","len","length","isHiddenSync","serverDfd","defer","localUrl","killCaches","serveStaticAssets","serveSocketIO","watchForFileChange","resolve","err","error","reject","promise","_handleFileChange","debounce","handleFileChange","watchTree","filter","f","curr","prev","then","release","emit","listen","on","socket","use","enable","static","maxAge","disable","req","res","next","headers","port","publicTunnelDfd","connect","url"],"mappings":"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","file":"server.js","sourcesContent":["import path from 'path';\nimport Q from 'q';\nimport _ from 'lodash';\nimport fs from 'fs';\nimport watch from 'watch';\nimport express from 'express';\nimport compression from 'compression';\nimport minimatch from 'minimatch';\nimport hidefile from 'hidefile';\nimport ngrok from 'ngrok';\nimport socketIo from 'socket.io';\nimport {execute as build} from './build.js';\n\nconst assetPort = process.env.PORT || 31284;\nconst disablePublicTunnel = process.env.DISABLE_PUBLIC_TUNNEL || false;\nconst envFile = path.join(process.cwd(), '.chcpenv');\n\nconst app = express();\nlet chcpContext;\nlet io;\nlet sourceDirectory;\nlet ignoredFiles;\n\nexport function execute(context) {\n    const funcs = [];\n\n    chcpContext = context;\n    ignoredFiles = context.ignoredFiles;\n    chcpContext.argv.localdev = true;\n    sourceDirectory = chcpContext.sourceDirectory;\n\n    funcs.push(function () {\n        if (disablePublicTunnel) {\n            return;\n        }\n\n        return publicTunnel(assetPort);\n    });\n\n    funcs.push(function (content_url) {\n        if (!disablePublicTunnel) {\n            context.argv.content_url = content_url;\n        }\n    });\n\n    funcs.push(function (debugOpts) {\n        if (debugOpts) {\n            context.debug_url = debugOpts.debug_url;\n            context.console_url = debugOpts.console_url;\n        }\n\n        return assetServer();\n    });\n\n    funcs.push(function (local_url) {\n        console.log('local_url', local_url);\n        context.local_url = local_url;\n\n        return build(context);\n    });\n\n    funcs.push(function (config) {\n        if (disablePublicTunnel) {\n            updateLocalEnv({content_url: config.content_url});\n        }\n\n        console.log('cordova-hcp local server available at: ' + context.local_url);\n        console.log('cordova-hcp public server available at: ' + config.content_url);\n    });\n\n    return funcs.reduce(Q.when, Q('initial'));\n}\n\nfunction updateLocalEnv(localEnv) {\n    localEnv.config_url = localEnv.content_url + '/chcp.json';\n\n    const json = JSON.stringify(localEnv, null, 2);\n    fs.writeFileSync(envFile, json);\n\n    return localEnv;\n}\n\nfunction fileChangeFilter(file) {\n    // Ignore changes in files from the ignore list\n    let fileIsAllowed = true;\n    const relativeFilePath = path.relative(chcpContext.sourceDirectory, file);\n\n    for (let i = 0, len = ignoredFiles.length; i < len; i++) {\n        if (hidefile.isHiddenSync(file) || minimatch(relativeFilePath, ignoredFiles[i])) {\n            fileIsAllowed = false;\n            break;\n        }\n    }\n\n    return fileIsAllowed;\n}\n\nfunction assetServer() {\n    const serverDfd = Q.defer();\n    const localUrl = 'http://localhost:' + assetPort;\n\n    // If a lot of files changes at the same time, we only want to trigger the change event once.\n\n    try {\n        killCaches(app);\n        serveStaticAssets(app);\n        serveSocketIO(app);\n        watchForFileChange();\n        serverDfd.resolve(localUrl);\n    } catch (err) {\n        console.error('assetServer error: ', err);\n        serverDfd.reject(err);\n    }\n\n    return serverDfd.promise;\n}\n\nfunction watchForFileChange() {\n    // Monitor for file changes\n    console.log('Checking: ', sourceDirectory);\n\n    const _handleFileChange = _.debounce(handleFileChange, 500);\n\n    watch.watchTree(sourceDirectory, {filter: fileChangeFilter}, function (f, curr, prev) {\n        if (typeof f == \"object\" && prev === null && curr === null) {\n            // Finished walking the tree\n            // console.log('Finished');\n        } else {\n            _handleFileChange(f);\n        }\n    });\n}\n\nfunction handleFileChange(file) {\n    console.log('File changed: ', file);\n\n    build(chcpContext).then(function (config) {\n        console.log('Should trigger reload for build: ' + config.release);\n        io.emit('release', {config: config});\n    });\n}\n\nfunction serveSocketIO(app) {\n    // Let's start the server\n    io = socketIo(app.listen(assetPort));\n\n    // Open up socket for file change notifications\n    //io.set('transports', ['polling']);\n    io.on('connection', function (socket) {\n        console.log('a user connected');\n\n        socket.on('disconnect', function () {\n            console.log('user disconnected');\n        });\n    });\n}\n\nfunction serveStaticAssets(app) {\n    // Static assets\n    app.use(compression());\n    app.enable('view cache');\n    app.use('/', express.static(sourceDirectory, {maxAge: 0}));\n}\n\nfunction killCaches() {\n    // Disable caches\n    app.disable('etag');\n\n    app.use(function (req, res, next) {\n        req.headers['if-none-match'] = 'no-match-for-this';\n        next();\n    });\n}\n\nfunction publicTunnel(port) {\n    const publicTunnelDfd = Q.defer();\n\n    // And make it accessible from the internet\n    ngrok.connect(port, function (err, url) {\n        if (err) {\n            publicTunnelDfd.reject(err);\n\n            return console.log('Could not create tunnel: ', err);\n        }\n\n        updateLocalEnv({content_url: url});\n\n        publicTunnelDfd.resolve(url);\n    });\n\n    return publicTunnelDfd.promise;\n}\n"]}