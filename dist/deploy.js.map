{"version":3,"sources":["../src/deploy.js"],"names":["execute","deploymentModes","s3","uploadToS3","ftp","uploadToFTP","loginFile","join","process","cwd","context","executeDfd","defer","then","deploy","resolve","promise","config","credentials","readFileSync","defaultConfig","JSON","parse","console","log","exit","e","pushMode","error","ignore","ignoredFiles","filter","ignoredFile","match","map","files","root","sourceDirectory","fileFilter","uploader","key","secret","region","s3region","bucket","s3bucket","prefix","s3prefix","acl","headers","CacheControl","Expires","concurrency","on","file","fresh","fullPath","url","err","stack","reject","pipe","client","host","ftpHost","port","ftpPort","user","username","password","logging","connect","upload","ftpPath","baseDir","overwrite","result","isEmpty","errors"],"mappings":"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","file":"deploy.js","sourcesContent":["import _ from 'lodash';\nimport path from 'path';\nimport fs from 'fs';\nimport Q from 'q';\nimport readdirp from 'readdirp';\nimport FtpClient from 'ftp-client';\nimport s3sync from 's3-sync-aws';\nimport {execute as build} from './build.js';\n\nconst deploymentModes = {\n    s3: uploadToS3,\n    ftp: uploadToFTP\n};\n\nconst loginFile = path.join(process.cwd(), '.chcplogin');\n\nexport function execute(context) {\n    const executeDfd = Q.defer();\n\n    build(context).then(function () {\n        deploy(context).then(function () {\n            executeDfd.resolve();\n        });\n    });\n\n    return executeDfd.promise;\n}\n\nfunction deploy(context) {\n    let config;\n    let credentials;\n\n    try {\n        config = fs.readFileSync(context.defaultConfig, 'utf8');\n        config = JSON.parse(config);\n\n        if (!config) {\n            console.log('You need to run \"cordova-hcp init\" before you can run \"cordova-hcp deploy\".');\n            console.log('Both commands needs to be invoked in the root of the project directory.');\n            process.exit(0);\n        }\n    } catch (e) {\n        console.log('Cannot parse cordova-hcp.json. Did you run cordova-hcp init?');\n        process.exit(0);\n    }\n\n    try {\n        credentials = fs.readFileSync(loginFile, 'utf8');\n        credentials = JSON.parse(credentials);\n\n        if (!credentials) {\n            console.log('You need to run \"cordova-hcp login\" before you can run \"cordova-hcp deploy\".');\n            process.exit(0);\n        }\n    } catch (e) {\n        console.log('Cannot parse .chcplogin: ', e);\n        process.exit(0);\n    }\n\n    const pushMode = credentials.pushMode;\n    try {\n        return deploymentModes[pushMode](context, config, credentials[pushMode]);\n    } catch (e) {\n        console.error('unsupported deployment method ', e);\n        process.exit(0);\n    }\n}\n\nfunction uploadToS3(context, config, credentials) {\n    const executeDfd = Q.defer();\n    let ignore = context.ignoredFiles.filter(ignoredFile => !ignoredFile.match(/^chcp/)).map(ignoredFile => `!${ignoredFile}`);\n\n    const files = readdirp({\n        root: context.sourceDirectory,\n        fileFilter: ignore\n    });\n\n    const uploader = s3sync({\n        key: credentials.key,\n        secret: credentials.secret,\n        region: config.s3region,\n        bucket: config.s3bucket,\n        prefix: config.s3prefix,\n        acl: 'public-read',\n        headers: {\n            CacheControl: 'no-cache, no-store, must-revalidate',\n            Expires: 0\n        },\n        concurrency: 20\n    });\n\n    uploader.on('data', function (file) {\n        if (file.fresh) {\n            console.log(\"Updated \" + file.fullPath + ' -> ' + file.url)\n        }\n    });\n\n    uploader.on('end', function () {\n        console.log(\"Deploy done\");\n        executeDfd.resolve();\n    });\n\n    uploader.on('error', function (err) {\n        console.error(\"unable to sync:\", err.stack);\n        executeDfd.reject();\n    });\n\n    uploader.on('fail', function (err) {\n        console.error(\"unable to sync:\", err);\n        executeDfd.reject();\n    });\n\n    //uploader.on('progress', function() {\n    //  var progress = uploader.progressTotal - uploader.progressAmount;\n    //  console.log(\"progress\", progress, uploader.progressTotal, uploader.progressAmount);\n    //});\n\n    files.pipe(uploader);\n    console.log('Deploy started');\n    return executeDfd.promise;\n}\n\nfunction uploadToFTP(context, config, credentials) {\n    const client = new FtpClient({\n        host: config.ftpHost,\n        port: config.ftpPort,\n        user: credentials.username,\n        password: credentials.password\n    }, {\n        logging: 'basic'\n    });\n\n    const executeDfd = Q.defer();\n\n    client.connect(function () {\n        client.upload(`${context.sourceDirectory}/**`, config.ftpPath, {\n            baseDir: context.sourceDirectory,\n            overwrite: 'all'\n        }, function (result) {\n            if (!_.isEmpty(result.errors)) {\n                console.error('Some files could not be uploaded: ', result.errors);\n                return executeDfd.reject();\n            }\n            executeDfd.resolve();\n        });\n    });\n    return executeDfd;\n}\n"]}