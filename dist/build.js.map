{"version":3,"sources":["../src/build.js"],"names":["execute","chcpContext","context","executeDfd","defer","config","prepareConfig","ignore","ignoredFiles","sourceDirectory","err","files","hashQueue","filter","isHiddenSync","file","map","hashFile","bind","parallelLimit","result","reject","sort","a","b","localeCompare","json","JSON","stringify","writeFile","manifestFilePath","argv","localdev","update","projectsConfigFilePath","console","log","release","resolve","promise","parse","readFileSync","defaultConfig","process","env","VERSION","calculateTimestamp","e","autogenerated","content_url","currentdate","Date","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","filename","callback","hash","createHash","stream","createReadStream","on","data","digest","relative","replace","RegExp"],"mappings":"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","file":"build.js","sourcesContent":["import path from 'path';\nimport fs from 'fs-extra';\nimport async from 'async';\nimport crypto from 'crypto';\nimport Q from 'q';\nimport recursive from 'recursive-readdir';\nimport hidefile from 'hidefile';\n\nlet chcpContext;\n\nexport function execute(context) {\n    const executeDfd = Q.defer();\n    const config = prepareConfig(context);\n    const ignore = context.ignoredFiles;\n\n    chcpContext = context;\n\n    recursive(context.sourceDirectory, ignore, function (err, files) {\n        const hashQueue = files.filter(file => !hidefile.isHiddenSync(file)).map((file) => hashFile.bind(null, file));\n\n        async.parallelLimit(hashQueue, 10, function (err, result) {\n            if (err) {\n                executeDfd.reject(err);\n            }\n\n            result.sort((a, b) => {\n                return a.file.localeCompare(b.file)\n            });\n\n            const json = JSON.stringify(result, null, 2);\n            fs.writeFile(context.manifestFilePath, json, function (err) {\n                if (err) {\n                    executeDfd.reject(err);\n                }\n\n                if (context.argv && context.argv.localdev) {\n                    config.update = 'now';\n                }\n\n                const json = JSON.stringify(config, null, 2);\n                fs.writeFile(chcpContext.projectsConfigFilePath, json, function (err) {\n                    if (err) {\n                        executeDfd.reject(err);\n                    }\n\n                    console.log('Build ' + config.release + ' created in ' + chcpContext.sourceDirectory);\n                    executeDfd.resolve(config);\n                });\n            });\n        });\n    });\n\n    return executeDfd.promise;\n}\n\nfunction prepareConfig(context) {\n    let config;\n\n    try {\n        config = JSON.parse(fs.readFileSync(context.defaultConfig, 'utf8'));\n        config.release = process.env.VERSION || calculateTimestamp();\n    } catch (e) {\n        config = {\n            autogenerated: true,\n            release: calculateTimestamp()\n        };\n    }\n\n    if (context.argv && context.argv.content_url) {\n        config.content_url = context.argv.content_url;\n    }\n\n    return config;\n}\n\nfunction calculateTimestamp() {\n    const currentdate = new Date();\n\n    return currentdate.getFullYear() + '.' +\n        (((currentdate.getMonth() + 1) < 10) ? '0' + (currentdate.getMonth() + 1) : (currentdate.getMonth() + 1)) + '.' +\n        ((currentdate.getDate() < 10) ? '0' + currentdate.getDate() : currentdate.getDate()) + '-' +\n        ((currentdate.getHours() < 10) ? '0' + currentdate.getHours() : currentdate.getHours()) + '.' +\n        ((currentdate.getMinutes() < 10) ? '0' + currentdate.getMinutes() : currentdate.getMinutes()) + '.' +\n        ((currentdate.getSeconds() < 10) ? '0' + currentdate.getSeconds() : currentdate.getSeconds());\n}\n\nfunction hashFile(filename, callback) {\n    const hash = crypto.createHash('md5');\n    const stream = fs.createReadStream(filename);\n\n    stream.on('data', function (data) {\n        hash.update(data, 'utf8');\n    });\n\n    stream.on('end', function () {\n        const result = hash.digest('hex');\n        const file = path.relative(chcpContext.sourceDirectory, filename).replace(new RegExp(\"\\\\\\\\\", \"g\"), \"/\");\n\n        callback(null, {\n            file: file,\n            hash: result\n        });\n    });\n}\n"]}