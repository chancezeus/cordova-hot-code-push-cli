{"version":3,"sources":["../src/login.js"],"names":["execute","configFile","join","process","cwd","loginFile","config","loginSchema","properties","pushMode","description","message","required","pattern","default","s3bucket","console","log","ftpHost","ftp","username","ask","history","value","password","hidden","s3","key","secret","context","validateConfig","override","argv","delimiter","start","then","content","done","readFileSync","exit","e","err"],"mappings":";;;;;QAyEgBA,O,GAAAA,O;;AAzEhB;;;;AACA;;;;AACA;;;;AACA;;;;AAEA,IAAMC,aAAa,eAAKC,IAAL,CAAUC,QAAQC,GAAR,EAAV,EAAyB,kBAAzB,CAAnB;AACA,IAAMC,YAAY,eAAKH,IAAL,CAAUC,QAAQC,GAAR,EAAV,EAAyB,YAAzB,CAAlB;AACA,IAAIE,eAAJ;;AAEA,IAAMC,cAAc;AAChBC,gBAAY;AACRC,kBAAU;AACNC,yBAAa,+CADP;AAENC,qBAAS,+CAFH;AAGNC,sBAAU,IAHJ;AAINC,qBAAS,UAJH;AAKNC,qBAAS,oBAAW;AAChB,oBAAIR,OAAOS,QAAX,EAAqB;AACjBC,4BAAQC,GAAR,CAAY,IAAZ;AACA,2BAAO,IAAP;AACH;;AAED,oBAAIX,OAAOY,OAAX,EAAoB;AAChBF,4BAAQC,GAAR,CAAY,KAAZ;AACA,2BAAO,KAAP;AACH;AACJ;AAfK,SADF;AAkBRE,aAAK;AACDX,wBAAY;AACRY,0BAAU;AACNV,iCAAa,+BADP;AAENC,6BAAS,cAFH;AAGNC,8BAAU,IAHJ;AAINS,yBAAK,eAAW;AACZ,+BAAO,iBAAOC,OAAP,CAAe,UAAf,EAA2BC,KAA3B,IAAoC,KAA3C;AACH;AANK,iBADF;AASRC,0BAAU;AACNd,iCAAa,+BADP;AAENC,6BAAS,cAFH;AAGNc,4BAAQ,IAHF;AAINb,8BAAU,IAJJ;AAKNS,yBAAK,eAAW;AACZ,+BAAO,iBAAOC,OAAP,CAAe,UAAf,EAA2BC,KAA3B,IAAoC,KAA3C;AACH;AAPK;AATF;AADX,SAlBG;AAuCRG,YAAI;AACAlB,wBAAY;AACRmB,qBAAK;AACDjB,iCAAa,sBADZ;AAEDC,6BAAS,8CAFR;AAGDC,8BAAU,IAHT;AAIDS,yBAAK,eAAY;AACb,+BAAO,iBAAOC,OAAP,CAAe,UAAf,EAA2BC,KAA3B,IAAoC,IAA3C;AACH;AANA,iBADG;AASRK,wBAAQ;AACJlB,iCAAa,0BADT;AAEJC,6BAAS,2CAFL;AAGJc,4BAAQ,IAHJ;AAIJb,8BAAU,IAJN;AAKJS,yBAAK,eAAY;AACb,+BAAO,iBAAOC,OAAP,CAAe,UAAf,EAA2BC,KAA3B,IAAoC,IAA3C;AACH;AAPG;AATA;AADZ;AAvCI;AADI,CAApB;;AAgEO,SAASvB,OAAT,CAAiB6B,OAAjB,EAA0B;AAC7BC;;AAEA,qBAAOC,QAAP,GAAkBF,QAAQG,IAA1B;AACA,qBAAOrB,OAAP,GAAiB,gBAAjB;AACA,qBAAOsB,SAAP,GAAmB,IAAnB;AACA,qBAAOC,KAAP;;AAEA,2CAAiB3B,WAAjB,EACK4B,IADL,CACU;AAAA,eAAW,sBAAU9B,SAAV,EAAqB+B,OAArB,CAAX;AAAA,KADV,EAEKD,IAFL,CAEUE,IAFV;AAGH;;AAED,SAASP,cAAT,GAA0B;AACtB,QAAI;AACAxB,iBAAS,aAAGgC,YAAH,CAAgBrC,UAAhB,EAA4B,MAA5B,CAAT;;AAEA,YAAI,CAACK,MAAL,EAAa;AACTU,oBAAQC,GAAR,CAAY,4EAAZ;AACAD,oBAAQC,GAAR,CAAY,yEAAZ;AACAd,oBAAQoC,IAAR,CAAa,CAAb;AACH;AACJ,KARD,CAQE,OAAOC,CAAP,EAAU;AACRxB,gBAAQC,GAAR,CAAY,8DAAZ;AACAd,gBAAQoC,IAAR,CAAa,CAAb;AACH;AACJ;;AAED,SAASF,IAAT,CAAcI,GAAd,EAAmB;AACf,QAAIA,GAAJ,EAAS;AACL,eAAOzB,QAAQC,GAAR,CAAYwB,GAAZ,CAAP;AACH;;AAEDzB,YAAQC,GAAR,CAAY,kDAAZ;AACAD,YAAQC,GAAR,CAAY,8CAAZ;AACAD,YAAQC,GAAR,CAAY,uCAAZ;AACH","file":"login.js","sourcesContent":["import path from \"path\";\nimport prompt from \"prompt\";\nimport fs from \"fs\";\nimport {getInput, writeFile} from \"./utils\";\n\nconst configFile = path.join(process.cwd(), 'cordova-hcp.json');\nconst loginFile = path.join(process.cwd(), '.chcplogin');\nlet config;\n\nconst loginSchema = {\n    properties: {\n        pushMode: {\n            description: 'Choose a method to push your code: (s3 | ftp)',\n            message: 'You need to choose a method to push your code',\n            required: true,\n            pattern: /(s3|ftp)/,\n            default: function() {\n                if (config.s3bucket) {\n                    console.log('s3');\n                    return 's3';\n                }\n\n                if (config.ftpHost) {\n                    console.log('ftp');\n                    return 'ftp';\n                }\n            }\n        },\n        ftp: {\n            properties: {\n                username: {\n                    description: 'Enter FTP username (required)',\n                    message: 'FTP username',\n                    required: true,\n                    ask: function() {\n                        return prompt.history('pushMode').value == 'ftp';\n                    }\n                },\n                password: {\n                    description: 'Enter FTP password (required)',\n                    message: 'FTP password',\n                    hidden: true,\n                    required: true,\n                    ask: function() {\n                        return prompt.history('pushMode').value == 'ftp';\n                    }\n                }\n            }\n        },\n        s3: {\n            properties: {\n                key: {\n                    description: 'Amazon Access Key Id',\n                    message: 'You need to provide the Amazon Access Key Id',\n                    required: true,\n                    ask: function () {\n                        return prompt.history('pushMode').value == 's3';\n                    }\n                },\n                secret: {\n                    description: 'Amazon Secret Access Key',\n                    message: 'You need to provide the Secret Access Key',\n                    hidden: true,\n                    required: true,\n                    ask: function () {\n                        return prompt.history('pushMode').value == 's3';\n                    }\n                }\n            }\n        }\n    }\n};\n\nexport function execute(context) {\n    validateConfig();\n\n    prompt.override = context.argv;\n    prompt.message = 'Please provide';\n    prompt.delimiter = ': ';\n    prompt.start();\n\n    getInput(prompt, loginSchema)\n        .then(content => writeFile(loginFile, content))\n        .then(done);\n}\n\nfunction validateConfig() {\n    try {\n        config = fs.readFileSync(configFile, 'utf8');\n\n        if (!config) {\n            console.log('You need to run \"cordova-hcp init\" before you can run \"cordova-hcp login\".');\n            console.log('Both commands needs to be invoked in the root of the project directory.');\n            process.exit(0);\n        }\n    } catch (e) {\n        console.log('Cannot parse cordova-hcp.json. Did you run cordova-hcp init?');\n        process.exit(0);\n    }\n}\n\nfunction done(err) {\n    if (err) {\n        return console.log(err);\n    }\n\n    console.log('Project initialized and .chcplogin file created.');\n    console.log('You SHOULD add .chcplogin to your .gitignore');\n    console.log('( echo \\'.chcplogin\\' >> .gitignore )');\n}\n"]}