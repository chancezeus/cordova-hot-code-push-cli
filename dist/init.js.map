{"version":3,"sources":["../src/init.js"],"names":["execute","polyfill","configFile","join","process","cwd","name","description","pattern","message","required","s3bucket","s3prefix","ask","history","value","s3region","default","ftpHost","ftpPort","ftpPath","contentUrl","RegExp","bucket","path","url","region","replace","host","iosIdentifier","androidIdentifier","update","schema","properties","ios_identifier","android_identifier","context","override","argv","delimiter","start","then","validateBucket","validateFtp","content","done","result","omit","err","console","log"],"mappings":"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","file":"init.js","sourcesContent":["import es6promise from \"es6-promise\";\nimport path from \"path\";\nimport prompt from \"prompt\";\nimport _ from \"lodash\";\nimport {getInput, writeFile} from \"./utils\";\n\nes6promise.polyfill();\n\nconst configFile = path.join(process.cwd(), 'cordova-hcp.json');\n\nconst name = {\n    description: 'Enter project name (required)',\n    pattern: /^[a-zA-Z\\-\\s0-9]+$/,\n    message: 'Name must be only letters, numbers, space or dashes',\n    required: true,\n};\n\nconst s3bucket = {\n    description: 'Amazon S3 Bucket name (required for cordova-hcp deploy)',\n    pattern: /^[a-zA-Z\\-0-9.]+$/,\n    message: 'Name must be only letters, numbers, or dashes',\n};\n\nconst s3prefix = {\n    description: 'Path in S3 bucket (optional for cordova-hcp deploy)',\n    pattern: /^\\/?(?:[a-zA-Z\\-\\s0-9.]+\\/?)+\\/$/,\n    message: 'Path must be only letters, numbers, spaces, forward slashes or dashes and must end with a forward slash',\n    ask: function() {\n        return !!prompt.history('s3bucket').value;\n    }\n};\n\nconst s3region = {\n    description: 'Amazon S3 region (required for cordova-hcp deploy)',\n    pattern: /^(us-east-1|us-west-2|us-west-1|eu-west-1|eu-central-1|ap-southeast-1|ap-southeast-2|ap-northeast-1|sa-east-1)$/,\n    default: 'us-east-1',\n    message: 'Must be one of: us-east-1, us-west-2, us-west-1, eu-west-1, eu-central-1, ap-southeast-1, ap-southeast-2, ap-northeast-1, sa-east-1',\n    ask: function() {\n        return !!prompt.history('s3bucket').value;\n    }\n};\n\nconst ftpHost = {\n    description: 'FTP Host (required for cordova-hcp deploy)',\n    pattern: /^[a-zA-Z\\-0-9.]+$/,\n    message: 'Name must be only letters, numbers, or dashes',\n};\n\nconst ftpPort = {\n    description: 'FTP Port (optional for cordova-hcp deploy)',\n    pattern: /^[0-9]+$/,\n    message: 'Port must be a number',\n    default: 21,\n    ask: function() {\n        return !!prompt.history('ftpHost').value;\n    }\n};\n\nconst ftpPath = {\n    description: 'FTP Path (optional for cordova-hcp deploy)',\n    pattern: /^\\/?(?:[a-zA-Z\\-\\s0-9.]+\\/?)+\\/$/,\n    message: 'Path must be only letters, numbers, spaces, forward slashes or dashes and must end with a forward slash',\n    ask: function() {\n        return !!prompt.history('ftpHost').value;\n    }\n};\n\nconst contentUrl = {\n    description: 'Enter full URL to directory where cordova-hcp build result will be uploaded',\n    pattern: new RegExp('^(?:https?://)(?:\\\\S+(?::\\\\S*)?@)?(?:(?!10(?:\\\\.\\\\d{1,3}){3})(?!127(?:\\\\.\\\\d{1,3}){3})(?!169\\\\.254(?:\\\\.\\\\d{1,3}){2})(?!192\\\\.168(?:\\\\.\\\\d{1,3}){2})(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))|(?:(?:[a-z\\\\x00a1-\\\\xffff0-9]+-?)*[a-z\\\\x00a1-\\\\xffff0-9]+)(?:\\\\.(?:[a-z\\\\x00a1-\\\\xffff0-9]+-?)*[a-z\\\\x00a1-\\\\xffff0-9]+)*(?:\\\\.(?:[a-z\\\\x00a1-\\\\xffff]{2,})))(?::\\\\d{2,5})?(?:/[^\\\\s]*)?$', 'iu'),\n    message: 'Must supply URL',\n    default: function() {\n        const bucket = prompt.history('s3bucket').value;\n        let path;\n        let url;\n\n        if (bucket) {\n            const region = prompt.history('s3region').value;\n            path = prompt.history('s3prefix').value;\n            url = `https://${region === 'us-east-1' ? 's3.amazonaws.com' : 's3-' + region + '.amazonaws.com'}/${bucket}/`;\n\n            if (path) {\n                url += path.replace(/^\\/+/, '');\n            }\n        } else {\n            const host = prompt.history('ftpHost').value;\n            if (host) {\n                path = prompt.history('ftpPath').value;\n                url = `http://${host}/`;\n\n                if (path) {\n                    url += path.replace(/^\\/+/, '');\n                }\n            }\n        }\n\n        return url;\n    }\n};\n\nconst iosIdentifier = {\n    description: 'IOS app identifier',\n    pattern: /^[a-zA-Z\\-0-9.]+$/,\n};\n\nconst androidIdentifier = {\n    description: 'Android app identifier',\n    pattern: /^[a-zA-Z\\-0-9.]+$/,\n};\n\nconst update = {\n    description: 'Update method (required)',\n    pattern: /(start|resume|now)/,\n    required: true,\n    message: 'Needs to be one of start, resume or now',\n    default: 'resume',\n};\n\nconst schema = {\n    properties: {\n        name,\n        s3bucket,\n        s3prefix,\n        s3region,\n        ftpHost,\n        ftpPort,\n        ftpPath,\n        contentUrl,\n        ios_identifier: iosIdentifier,\n        android_identifier: androidIdentifier,\n        update\n    },\n};\n\nexport function execute(context) {\n    prompt.override = context.argv;\n    prompt.message = 'Please provide';\n    prompt.delimiter = ': ';\n    prompt.start();\n\n    getInput(prompt, schema)\n        .then(validateBucket)\n        .then(validateFtp)\n        .then(content => writeFile(configFile, content))\n        .then(done);\n}\n\nfunction validateBucket(result) {\n    if (!result.s3bucket) {\n        return _.omit(result, ['s3region', 's3bucket', 's3prefix']);\n    }\n\n    return result;\n}\n\nfunction validateFtp(result) {\n    if (!result.ftpHost) {\n        return _.omit(result, ['ftpHost', 'ftpPort', 'ftpPath']);\n    }\n\n    return result;\n}\n\nfunction done(err) {\n    if (err) {\n        return console.log(err);\n    }\n    console.log('Project initialized and cordova-hcp.json file created.');\n    console.log('If you wish to exclude files from being published, specify them in .chcpignore');\n    console.log('Before you can push updates you need to run \"cordova-hcp login\" in project directory');\n}\n"]}